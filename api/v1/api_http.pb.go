// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.29.1
// source: api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTaskCreateTask = "/api.v1.Task/CreateTask"
const OperationTaskDownloadTranslatedContent = "/api.v1.Task/DownloadTranslatedContent"
const OperationTaskExecuteTranslationTask = "/api.v1.Task/ExecuteTranslationTask"
const OperationTaskGetTaskDetail = "/api.v1.Task/GetTaskDetail"
const OperationTaskRegisterUser = "/api.v1.Task/RegisterUser"
const OperationTaskUserLogin = "/api.v1.Task/UserLogin"

type TaskHTTPServer interface {
	// CreateTask Create a task
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	DownloadTranslatedContent(context.Context, *DownloadTranslatedContentRequest) (*DownloadTranslatedContentResponse, error)
	ExecuteTranslationTask(context.Context, *ExecuteTranslationTaskRequest) (*ExecuteTranslationTaskRequestResponse, error)
	GetTaskDetail(context.Context, *GetTaskDetailRequest) (*GetTaskDetailResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
}

func RegisterTaskHTTPServer(s *http.Server, srv TaskHTTPServer) {
	r := s.Route("/")
	r.POST("/tasks", _Task_CreateTask0_HTTP_Handler(srv))
	r.POST("/tasks/{task_id}/translate", _Task_ExecuteTranslationTask0_HTTP_Handler(srv))
	r.GET("/tasks/{task_id}", _Task_DownloadTranslatedContent0_HTTP_Handler(srv))
	r.GET("/tasks/{task_id}/download", _Task_GetTaskDetail0_HTTP_Handler(srv))
	r.POST("/auth/users", _Task_RegisterUser0_HTTP_Handler(srv))
	r.POST("/auth/login", _Task_UserLogin0_HTTP_Handler(srv))
}

func _Task_CreateTask0_HTTP_Handler(srv TaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTaskCreateTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTask(ctx, req.(*CreateTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTaskResponse)
		return ctx.Result(200, reply)
	}
}

func _Task_ExecuteTranslationTask0_HTTP_Handler(srv TaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExecuteTranslationTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTaskExecuteTranslationTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExecuteTranslationTask(ctx, req.(*ExecuteTranslationTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExecuteTranslationTaskRequestResponse)
		return ctx.Result(200, reply)
	}
}

func _Task_DownloadTranslatedContent0_HTTP_Handler(srv TaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DownloadTranslatedContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTaskDownloadTranslatedContent)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DownloadTranslatedContent(ctx, req.(*DownloadTranslatedContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DownloadTranslatedContentResponse)
		return ctx.Result(200, reply)
	}
}

func _Task_GetTaskDetail0_HTTP_Handler(srv TaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTaskGetTaskDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTaskDetail(ctx, req.(*GetTaskDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTaskDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Task_RegisterUser0_HTTP_Handler(srv TaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTaskRegisterUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterUser(ctx, req.(*RegisterUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterUserResponse)
		return ctx.Result(200, reply)
	}
}

func _Task_UserLogin0_HTTP_Handler(srv TaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserLoginRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTaskUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserLogin(ctx, req.(*UserLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLoginResponse)
		return ctx.Result(200, reply)
	}
}

type TaskHTTPClient interface {
	CreateTask(ctx context.Context, req *CreateTaskRequest, opts ...http.CallOption) (rsp *CreateTaskResponse, err error)
	DownloadTranslatedContent(ctx context.Context, req *DownloadTranslatedContentRequest, opts ...http.CallOption) (rsp *DownloadTranslatedContentResponse, err error)
	ExecuteTranslationTask(ctx context.Context, req *ExecuteTranslationTaskRequest, opts ...http.CallOption) (rsp *ExecuteTranslationTaskRequestResponse, err error)
	GetTaskDetail(ctx context.Context, req *GetTaskDetailRequest, opts ...http.CallOption) (rsp *GetTaskDetailResponse, err error)
	RegisterUser(ctx context.Context, req *RegisterUserRequest, opts ...http.CallOption) (rsp *RegisterUserResponse, err error)
	UserLogin(ctx context.Context, req *UserLoginRequest, opts ...http.CallOption) (rsp *UserLoginResponse, err error)
}

type TaskHTTPClientImpl struct {
	cc *http.Client
}

func NewTaskHTTPClient(client *http.Client) TaskHTTPClient {
	return &TaskHTTPClientImpl{client}
}

func (c *TaskHTTPClientImpl) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...http.CallOption) (*CreateTaskResponse, error) {
	var out CreateTaskResponse
	pattern := "/tasks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTaskCreateTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TaskHTTPClientImpl) DownloadTranslatedContent(ctx context.Context, in *DownloadTranslatedContentRequest, opts ...http.CallOption) (*DownloadTranslatedContentResponse, error) {
	var out DownloadTranslatedContentResponse
	pattern := "/tasks/{task_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTaskDownloadTranslatedContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TaskHTTPClientImpl) ExecuteTranslationTask(ctx context.Context, in *ExecuteTranslationTaskRequest, opts ...http.CallOption) (*ExecuteTranslationTaskRequestResponse, error) {
	var out ExecuteTranslationTaskRequestResponse
	pattern := "/tasks/{task_id}/translate"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTaskExecuteTranslationTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TaskHTTPClientImpl) GetTaskDetail(ctx context.Context, in *GetTaskDetailRequest, opts ...http.CallOption) (*GetTaskDetailResponse, error) {
	var out GetTaskDetailResponse
	pattern := "/tasks/{task_id}/download"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTaskGetTaskDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TaskHTTPClientImpl) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...http.CallOption) (*RegisterUserResponse, error) {
	var out RegisterUserResponse
	pattern := "/auth/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTaskRegisterUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TaskHTTPClientImpl) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...http.CallOption) (*UserLoginResponse, error) {
	var out UserLoginResponse
	pattern := "/auth/login"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTaskUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
